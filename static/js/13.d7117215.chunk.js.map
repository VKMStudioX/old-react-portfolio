{"version":3,"sources":["components/Slider2.jsx","layouts/SingleProjectSui.jsx","layouts/ProjectsSui.jsx"],"names":["Slider","props","slides","items","map","item","onClick","openModal","src","alt","altText","style","opacity","useContext","StoreContext","setModalOpen","setModalImage","imgSrc","autoPlay","infiniteLoop","interval","showArrows","showThumbs","showStatus","showIndicators","useKeyboardArrows","SingleProjectSui","projects","images","projectsListIcons","listIcons","projectsAddListIcons","addlistIcons","ListItems","List","Item","className","Icon","name","listIcon","size","Content","Header","listHeader","Description","listDescr","additionalItems","listLink","to","pathname","target","additionalDividerAndItemList","Divider","horizontal","addDividerKeywords","ProjectContent","Grid","columns","divided","stackable","padded","Row","centered","as","headerIcon","headerContent","Column","dividerKeywords","animated","selection","isAddDivider","Segment","ProjectsSui","desertShopProjects","desertShopImages","pCOWebProjects","pCOWebImages","hmiProjects","hmiImages","vueProjects","vueImages","automProjects","automImages","unsplashImages","unsplashProjects","vertical","inverted","widescreen","emulateTouch"],"mappings":"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","file":"static/js/13.d7117215.chunk.js","sourcesContent":["import React, { useContext }  from 'react';\r\n\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\r\nimport { Carousel } from 'react-responsive-carousel';\r\n\r\nimport { StoreContext } from '../Store/StoreProvider';\r\n\r\n\r\nconst Slider = (props) => {\r\n\r\n    const items = props.items;\r\n    const slides = items.map((item) => {\r\n        return (\r\n            <div key={item.src} onClick={() => openModal(item.src)}>\r\n            <img src={item.src} alt={item.altText} style={{opacity: '0.75', }} />\r\n            {/* <p className=\"legend\">{item.caption}</p> */}\r\n        </div>\r\n        );\r\n      });\r\n\r\n      const  { setModalOpen, setModalImage } = useContext(StoreContext);\r\n     \r\n      const openModal = (imgSrc) => {\r\n        setModalImage(imgSrc)\r\n        setModalOpen(true);\r\n      }\r\n\r\n  return (\r\n      <>\r\n        <Carousel autoPlay={true} infiniteLoop={true} interval='5000' showArrows={true} showThumbs={false} showStatus={false} showIndicators={false} useKeyboardArrows >\r\n                {slides}\r\n            </Carousel>\r\n\r\n            \r\n           \r\n</>\r\n  );\r\n}\r\n\r\nexport default Slider;\r\n","import React from 'react';\r\nimport { Grid, Icon, List, Header, Divider, Segment } from 'semantic-ui-react';\r\nimport Slider from '../components/Slider2';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst SingleProjectSui = ({projects, images}) => {\r\n\r\n    const projectsListIcons = projects.listIcons\r\n    const projectsAddListIcons = projects.addlistIcons\r\n\r\n    const ListItems = projectsListIcons.map((item) => {\r\n        return (\r\n            <List.Item key={item.listHeader} className=\"no-pointer\">\r\n            <Icon name={item.listIcon} size='big' />\r\n            <List.Content className=\"no-pointer\">\r\n              <List.Header>{item.listHeader}</List.Header>\r\n              <List.Description>\r\n              {item.listDescr}\r\n              </List.Description>\r\n            </List.Content>\r\n          </List.Item>\r\n        );\r\n      });\r\n\r\n      const additionalItems = projectsAddListIcons.map((item) => {\r\n        return (\r\n            <List.Item key={item.listHeader}> \r\n            <Icon name={item.listIcon} size='big' className={item.listLink !== 'not available' ? \"link\" : null} />\r\n            <List.Content>\r\n              <List.Header>\r\n              {item.listLink !== 'not available'\r\n              ? <Link to={{ pathname: item.listLink }} target=\"_blank\" className=\"link\">{item.listHeader}</Link>\r\n              : item.listHeader}\r\n              </List.Header>\r\n              <List.Description>\r\n              {item.listLink !== 'not available'\r\n              ? <Link to={{ pathname: item.listLink }} target=\"_blank\" className=\"link\">{item.listDescr}</Link>\r\n              : item.listDescr}\r\n              </List.Description>\r\n            </List.Content>\r\n          </List.Item>\r\n        )\r\n      });\r\n      \r\n    const additionalDividerAndItemList = (\r\n        <>\r\n        <Divider horizontal>{projects.addDividerKeywords}</Divider>\r\n        {additionalItems}\r\n        </>\r\n    )\r\n\r\n    const ProjectContent = (\r\n      <Grid columns={2} divided stackable padded='horizontally' >\r\n        <Grid.Row divided centered>\r\n                <Header as='h2'>\r\n                  <Icon name={projects.headerIcon} />\r\n                <Header.Content>\r\n                  {projects.headerContent}\r\n                </Header.Content>\r\n                </Header> \r\n              </Grid.Row>\r\n      <Grid.Row>\r\n      <Grid.Column>\r\n         <Slider items = {images} />\r\n      </Grid.Column>\r\n     <Grid.Column>\r\n          <Grid.Row divided>\r\n</Grid.Row>\r\n  <Divider horizontal>Keywords</Divider>\r\n    <Header as='h3'>{projects.dividerKeywords}</Header> \r\n       <List animated selection size=\"big\">\r\n       {ListItems}\r\n       {projects.isAddDivider === true \r\n       ? additionalDividerAndItemList\r\n       : null}\r\n  </List>\r\n      </Grid.Column>\r\n    </Grid.Row> \r\n    </Grid>\r\n      )\r\n\r\n    return (\r\n<>\r\n\r\n<Segment padded=\"very\" className='projectBg'>\r\n  {ProjectContent}\r\n</Segment> \r\n\r\n</>\r\n     );\r\n}\r\n \r\nexport default SingleProjectSui;","import React, { useContext } from 'react';\r\nimport { StoreContext } from '../Store/StoreProvider';\r\nimport SingleProjectSui from './SingleProjectSui';\r\nimport { Grid, Segment, Icon, Header, Divider } from 'semantic-ui-react';\r\n\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\r\nimport { Carousel } from 'react-responsive-carousel';\r\n\r\n\r\nconst ProjectsSui = () => {\r\n\r\n    const  { \r\n      desertShopProjects, \r\n      desertShopImages, \r\n      pCOWebProjects, \r\n      pCOWebImages, \r\n      hmiProjects, \r\n      hmiImages, \r\n      vueProjects, \r\n      vueImages,\r\n      automProjects,\r\n      automImages,\r\n      unsplashImages,\r\n      unsplashProjects\r\n    } = useContext(StoreContext);\r\n\r\n    return (\r\n<>\r\n<Segment vertical className='segmentBoxShadow'>\r\n\r\n<Grid inverted stackable padded centered vertical>\r\n          <Grid.Row >\r\n            <Grid.Column widescreen={13}>\r\n              <Grid.Row divided>\r\n\r\n                <Header inverted as='h2'>\r\n                  <Icon name='folder open' />\r\n                  <Header.Content>Projects</Header.Content>\r\n                </Header> \r\n\r\n              </Grid.Row>\r\n               <Grid.Row>\r\n\r\n                <Divider horizontal inverted>Projects</Divider>\r\n\r\n                <Carousel \r\n                autoPlay={false} \r\n                infiniteLoop={true} \r\n                interval='5000' \r\n                showArrows={true} \r\n                showThumbs={false} \r\n                showStatus={false} \r\n                showIndicators={true} \r\n                useKeyboardArrows \r\n                emulateTouch={false}\r\n                >\r\n              \r\n            <SingleProjectSui\r\n              projects={desertShopProjects}\r\n              images={desertShopImages}\r\n            />   \r\n            \r\n            <SingleProjectSui\r\n              projects={unsplashProjects}\r\n              images={unsplashImages}\r\n            />\r\n\r\n            <SingleProjectSui\r\n              projects={pCOWebProjects}\r\n              images={pCOWebImages}\r\n            />\r\n\r\n            <SingleProjectSui\r\n              projects={hmiProjects}\r\n              images={hmiImages}\r\n            />\r\n\r\n            <SingleProjectSui\r\n              projects={vueProjects}\r\n              images={vueImages}\r\n            />\r\n\r\n            <SingleProjectSui\r\n              projects={automProjects}\r\n              images={automImages}\r\n            />\r\n\r\n            </Carousel>\r\n            \r\n</Grid.Row>\r\n</Grid.Column>\r\n</Grid.Row>\r\n</Grid>\r\n\r\n</Segment>\r\n</>\r\n     );\r\n}\r\n \r\nexport default ProjectsSui;"],"sourceRoot":""}