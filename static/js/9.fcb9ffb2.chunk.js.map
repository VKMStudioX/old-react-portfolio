{"version":3,"sources":["components/ContactForm.jsx","layouts/ContactSUI.jsx"],"names":["ContactForm","isEmailOK","useContext","StoreContext","nameRef","contactForm","setContactForm","useRef","subjectRef","emailRef","messageRef","useState","value","isClicked","nameState","setNameState","subjectState","setSubjectState","emailState","setEmailState","messageState","setMessageState","success","error","formCheckerState","setFormCheckerState","includes","console","log","useEffect","emailjs","init","process","Form","inverted","color","widths","Group","Ref","innerRef","Field","length","id","control","Input","label","placeholder","onChange","e","target","TextArea","disabled","Button","content","onClick","preventDefault","templateParams","name","subject","email","message","send","then","result","sendEmail","Message","header","Contact","contact","contactContent","Grid","stackable","padded","centered","vertical","className","Row","Column","widescreen","divided","Header","as","Icon","headerIcon","Content","headerContent","Divider","horizontal","List","animated","celled","selection","size","Item","listIcons","listIcon","href","listHeader","Description","listDescr","to","pathname","headerMailIcon","headerMailContent","Segment"],"mappings":"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","file":"static/js/9.fcb9ffb2.chunk.js","sourcesContent":["import React, { useState, useRef, useContext, useEffect } from 'react';\r\nimport { Form, Input, TextArea, Button, Message, Ref } from 'semantic-ui-react';\r\nimport { StoreContext } from '../Store/StoreProvider';\r\nimport emailjs from 'emailjs-com';\r\n\r\nconst ContactForm = () => {\r\n\r\n    const  { contactForm, setContactForm  } = useContext(StoreContext);\r\n\r\n    const nameRef = useRef();\r\n    const subjectRef = useRef();\r\n    const emailRef = useRef();\r\n    const messageRef = useRef();\r\n\r\n    const [nameState, setNameState] = useState({value:'', isClicked: false});\r\n    const [subjectState, setSubjectState] = useState({value:'', isClicked: false});\r\n    const [emailState, setEmailState] = useState({value:'', isClicked: false});\r\n    const [messageState, setMessageState] = useState({value:'', isClicked: false});\r\n    const [formCheckerState, setFormCheckerState] = useState({success: false, error: false});\r\n\r\n    let isEmailOK;\r\n    emailState.value.includes('@') && emailState.value.includes('.') ? isEmailOK = true : isEmailOK = false\r\n    console.log(\"isEmailOK: \"+isEmailOK);\r\n\r\n    const handleSubmitForm = (e) => {\r\n        e.preventDefault();\r\n        setContactForm({name: nameState.value, subject: subjectState.value, email: emailState.value, message: messageState.value});\r\n        // setContactForm({\r\n        //   name: nameRef.current.lastChild.firstChild.value,\r\n        //   subject: subjectRef.current.lastChild.firstChild.value,\r\n        //   email: emailRef.current.lastChild.firstChild.value, \r\n        //   message: messageRef.current.lastChild.value\r\n        //               });\r\n        setNameState({value:'', isClicked: false});\r\n        setSubjectState({value:'', isClicked: false});\r\n        setEmailState({value:'', isClicked: false});\r\n        setMessageState({value:'', isClicked: false});\r\n        setFormCheckerState({success: true, error: false});\r\n    }\r\n\r\n      \r\nuseEffect(() => {\r\n  emailjs.init(process.env.REACT_APP_EMAILJS_USER_ID)\r\n},[])\r\n\r\n    \r\n  function sendEmail(e) {\r\n    e.preventDefault();\r\n       \r\n    const templateParams =  {\r\n      name: nameState.value, \r\n      subject: subjectState.value, \r\n      email: emailState.value, \r\n      message: messageState.value\r\n     }\r\n\r\n    emailjs.send(process.env.REACT_APP_EMAILJS_SERVICE_ID, process.env.REACT_APP_EMAILJS_TEMPLATE_ID, templateParams, process.env.REACT_APP_EMAILJS_USER_ID)\r\n      .then((result) => {\r\n        setNameState({value:'', isClicked: false});\r\n        setSubjectState({value:'', isClicked: false});\r\n        setEmailState({value:'', isClicked: false});\r\n        setMessageState({value:'', isClicked: false});\r\n        setFormCheckerState({success: true, error: false});\r\n      }, (error) => {\r\n        setFormCheckerState({success: false, error: true});\r\n      });\r\n  }\r\n    \r\n\r\n    \r\n\r\n    \r\n    return ( \r\n        <>\r\n         <Form inverted color=\"white\" widths=\"equal\" success={formCheckerState.success} error={formCheckerState.error}> \r\n                        <Form.Group widths='equal'>\r\n                        <Ref innerRef={nameRef}>\r\n                          <Form.Field\r\n                            error={nameState.value.length === 0 && nameState.isClicked}\r\n                            id='form-input-control-first-name'\r\n                            control={Input}\r\n                            label='Name'\r\n                            placeholder='Name'\r\n                            value={nameState.value}\r\n                            onChange ={(e) => {setNameState({value: e.target.value, isClicked: true});}}\r\n                            // onClick ={() => {nameRef.current.lastChild.firstChild.focus(); isNameClicked = true}}\r\n                          /></Ref>\r\n                          <Ref innerRef={subjectRef}>\r\n                          <Form.Field\r\n                            error={subjectState.value.length === 0 && subjectState.isClicked}\r\n                            id='form-input-control-last-name'\r\n                            control={Input}\r\n                            label='Subject'\r\n                            placeholder='Subject'\r\n                            value={subjectState.value}\r\n                            onChange ={(e) => {setSubjectState({value: e.target.value, isClicked: true});}}\r\n                          /></Ref>\r\n                          </Form.Group>\r\n                        <Form.Group>\r\n                          <Ref innerRef={emailRef}>\r\n                          <Form.Field\r\n                            error={(emailState.value.length === 0 && emailState.isClicked) || (emailState.length > 1 && !isEmailOK  && emailState.isClicked)}\r\n                            id='form-input-control-email'\r\n                            control={Input}\r\n                            label='Email'\r\n                            placeholder='joe@wp.pl'\r\n                            value={emailState.value}\r\n                            onChange ={(e) => {setEmailState({value: e.target.value, isClicked: true});}}\r\n                          /></Ref>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                          <Ref innerRef={messageRef}>\r\n                          <Form.Field\r\n                            error={messageState.value.length === 0 && messageState.isClicked}\r\n                            id='form-textarea-control-opinion'\r\n                            control={TextArea}\r\n                            label='Message'\r\n                            placeholder='Message'\r\n                            value={messageState.value}\r\n                            onChange ={(e) => {setMessageState({value: e.target.value, isClicked: true});}}\r\n                          /></Ref>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                          <Form.Field\r\n                            disabled={nameState.value.length === 0 || subjectState.value.length === 0 || emailState.value.length === 0 || messageState.value.length === 0 || !isEmailOK}\r\n                            id='form-button-control-public'\r\n                            control={Button}\r\n                            content='Send'\r\n                            onClick ={(e) => {sendEmail(e)}}\r\n                         />\r\n                        </Form.Group>\r\n                        <Message\r\n                            success\r\n                            header='Form Completed'\r\n                            content=\"Message sent sucessfully\"\r\n                        />\r\n                        <Message\r\n                            error\r\n                            header='An Error Ocurred'\r\n                            content='Propably bad e-mail adress or a mail-server problem'\r\n                        />\r\n                      </Form>\r\n        </>\r\n     );\r\n}\r\n \r\nexport default ContactForm;","import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { StoreContext } from '../Store/StoreProvider';\r\nimport { Grid, Segment, Icon, List, Header, Divider } from 'semantic-ui-react';\r\nimport ContactForm  from '../components/ContactForm'\r\n\r\nconst Contact = () => {\r\n\r\n    const  { contact } = useContext(StoreContext);\r\n\r\n    const contactContent = (\r\n  <>\r\n    <Grid inverted stackable padded centered vertical className=\"contact\">\r\n\r\n      <Grid.Row>\r\n        <Grid.Column widescreen={13}>\r\n          <Grid.Row divided>\r\n            <Header inverted as='h2'>\r\n              <Icon name={contact.headerIcon} />\r\n              <Header.Content>{contact.headerContent}</Header.Content>\r\n            </Header>  \r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <Divider horizontal inverted>Contact</Divider>  \r\n              <List inverted className='listColor' animated celled selection size=\"big\">\r\n                <List.Item>\r\n            <Icon name={contact.listIcons[0].listIcon} size='big' className='no-pointer'/>\r\n            <List.Content>\r\n              <List.Header className='link-white'><a href='mailto:vkmstudiox@gmail.com' className='link-white'>{contact.listIcons[0].listHeader}</a></List.Header>\r\n              <List.Description>\r\n              {contact.listIcons[0].listDescr}\r\n              </List.Description>\r\n            </List.Content>\r\n          </List.Item>\r\n          <List.Item>\r\n            <Icon name={contact.listIcons[1].listIcon} size='big' className='no-pointer'/>\r\n            <List.Content>\r\n              <List.Header className='link-white'>\r\n              <Link to={{pathname: 'https://www.linkedin.com/in/krzysztof-m-01124420b/'}} target=\"_blank\">{contact.listIcons[1].listHeader}</Link></List.Header>\r\n              <List.Description>\r\n              {contact.listIcons[1].listDescr}\r\n              </List.Description>\r\n            </List.Content>\r\n          </List.Item>\r\n              </List>\r\n          </Grid.Row>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n\r\n      <Grid.Row>\r\n        <Grid.Column widescreen={13}>\r\n          <Grid.Row divided>\r\n            <Header inverted as='h2'>\r\n              <Icon name={contact.headerMailIcon} />\r\n              <Header.Content>{contact.headerMailContent}</Header.Content>\r\n            </Header> \r\n          </Grid.Row>\r\n          <Grid.Row>\r\n                <Divider horizontal inverted>Contact Form</Divider>\r\n                <ContactForm />\r\n          </Grid.Row>\r\n        </Grid.Column>    \r\n      </Grid.Row> \r\n    </Grid>\r\n  </>\r\n      )\r\n\r\n\r\n\r\n  return (\r\n<>\r\n\r\n<Segment vertical padded=\"very\"> \r\n{contactContent}\r\n</Segment> \r\n\r\n</>\r\n     );\r\n}\r\n \r\nexport default Contact;"],"sourceRoot":""}